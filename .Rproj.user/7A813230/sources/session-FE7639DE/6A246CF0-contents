---
title: "Web Scraping and Clustering in Python"
author: "Emre Ã‡akmak"
date: "2022-10-20"
toc: true
toc-location: left
number-sections: true
format: 
  html:
    theme: 
      dark: vapor
      light: pulse
    fontsize: 0.8em
editor: visual
---

### Web Scraping and Clustering on NFT Marketplace

We are importing the required libraries. Especially selenium for scraping, pandas for dataframes and sklearn for clustering processes.

```{python import-libraries, message = FALSE}
from OpenSSL import SSL
from selenium import webdriver
from bs4 import BeautifulSoup
import pandas as pd
import socket
 
import io
import shutil
import re
import urllib.request
import os
import errno

import urllib.request
import xlsxwriter
import time

import pandas
import numpy

import matplotlib.pyplot as plt
from kneed import KneeLocator
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
```


```{python define-variables}
driver = webdriver.Chrome(r"C:\Users\EMRE\Documents\GitHub\mef06-cakmakem\ScrapingFiles\chromedriver.exe")
driver.get("https://www.jpg.store/collection/pavia?minPrice=300000000&maxPrice=1000000000")
SCROLL_PAUSE_TIME = 0.8

# Get scroll height
last_height = driver.execute_script("return document.body.scrollHeight")
a=0
n=60
while a<n:
    # Scroll down to bottom
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")

    # Wait to load page
    time.sleep(SCROLL_PAUSE_TIME)

    # Calculate new scroll height and compare with last scroll height
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height
    a+=1


itemset = []
priceset=[]
content = driver.page_source
soup = BeautifulSoup(content)
for a in soup.find_all('div', attrs = {'class', 'styles_itemsGrid__J7c4P grid'}):
    children = a.findChildren("span", recursive=False)
    for child in children:
        sublings = child.find_all('div', attrs = {'class', 'NFTMarketplaceCard_nftMarketplaceCardContent__I5fdd'})
        pricesclass = child.find_all('div', attrs = {'class', 'NFTMarketplaceCard_nftMarketplaceCardPriceContainer__a3CBp'})
        for items in sublings:
            a=items.findChildren("h4",recursive=False)
            #.find_all('h4', attrs = {'id', 'asset-title'})
            #for i in a.contents:
            itemset.append(a[0])
        for price in pricesclass:
            b=price.findChildren("div", recursive=False)
            for c in b:
                d=c.findChildren("span",recursive=False)
                priceset.append(d[0])
                
df = pd.DataFrame(itemset, columns=["names"])
df_p = pd.DataFrame(priceset, columns=['price'])

df_final =  pd.concat([df,df_p],axis=1)
df_final.head()
```



